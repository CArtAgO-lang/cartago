/* Generated By:JavaCC: Do not edit this line. ArtifactManualParser.java */
  package cartago.manual.parser;

  import cartago.*;
  import cartago.manual.syntax.*;
  import cartago.manual.syntax.UsageProtBody.BodyType;
  import cartago.manual.syntax.LogExpr.LogicalOp;
  import cartago.manual.syntax.RelExpr.RelationalOp;
  import cartago.manual.syntax.ArithExpr.ArithmeticOp;

  import java.util.*;
  import java.util.logging.*;


public class ArtifactManualParser implements ArtifactManualParserConstants {

    private String asSource = null;

    private static Logger logger = Logger.getLogger("aslparser");
    private static Set<String> parsedFiles = new HashSet<String>();
    //private static Config config = Config.get();

        public Manual parse() throws ParseException {
                return Start();
        }

    private String getSourceRef(SourceInfo s) {
        if (s == null)
            return "[]";
        else
            return "["+s.getSrcFile()+":"+s.getBeginSrcLine()+"]";
    }
    private String getSourceRef(DefaultTerm t) {
        return getSourceRef( ((DefaultTerm)t).getSrcInfo());
    }
    private String getSourceRef(Object t) {
        if (t instanceof DefaultTerm)
            return getSourceRef((DefaultTerm)t);
        else if (t instanceof SourceInfo)
            return getSourceRef((SourceInfo)t);
        else
            return "[]";
    }

    private Term changeToAtom(Object o) {
        Term u = (Term)o;
        if (u.isAtom()) {
           return new Atom((Literal)u);
        } else {
           return u;
        }
    }

/* productions */
  final public Manual Start() throws ParseException {
  Token artType = null;
  Manual man = null;
    jj_consume_token(MAN);
    artType = jj_consume_token(ATOM);
    jj_consume_token(LBRACE);
        man = new Manual(artType.toString(),null);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case UPROT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
          Token protSignature = null;
          Object pre = null;
          Literal funct = null;
          UsageProtBody protocol = null;
      jj_consume_token(UPROT);
      protSignature = jj_consume_token(ATOM);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCT:
        jj_consume_token(FUNCT);
        funct = literal();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRE:
        jj_consume_token(PRE);
        pre = log_expr();
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(BODY);
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case TK_TRUE:
      case TK_FALSE:
      case TK_NOT:
      case TK_NEG:
      case NUMBER:
      case STRING:
      case ATOM:
      case UNNAMEDVAR:
      case 32:
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
        protocol = plan_body();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
      jj_consume_token(RBRACE);
                UsageProtocol prot = new UsageProtocol(protSignature.image,funct);

                if (pre!=null){
                        prot.setPrecondition(pre);
                }

                if (protocol!=null){
                    prot.setBody(protocol);
                }

                man.addUsageProtocol(prot);
    }
    jj_consume_token(RBRACE);
    jj_consume_token(0);
                {if (true) return man;}
    throw new Error("Missing return statement in function");
  }

/* Plan body */
  final public UsageProtBody plan_body() throws ParseException {
                                  Object F; UsageProtBody R = null;
    F = body_formula();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
                             if (!(F instanceof UsageProtBody)) {if (true) throw new ParseException(getSourceRef(F)+" "+F+" is not a body literal!");}
      R = plan_body();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
                             if (F instanceof UsageProtBody) {
                                ((UsageProtBody)F).setBodyNext( R );
                             }
                             {if (true) return (UsageProtBody)F;}
    throw new Error("Missing return statement in function");
  }

  final public UsageProtBody plan_body_term() throws ParseException {
                                  UsageProtBody B = null;
    jj_consume_token(LBRACE);
    B = plan_body();
    jj_consume_token(RBRACE);
                             B.setAsBodyTerm(true);
                             {if (true) return B;}
    throw new Error("Missing return statement in function");
  }

  final public Object body_formula() throws ParseException {
                         BodyType formType = BodyType.action;  Object B;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 32:
        jj_consume_token(32);
                         formType = BodyType.achieve;
        break;
      case 33:
        jj_consume_token(33);
                         formType = BodyType.achieveNF;
        break;
      case 34:
        jj_consume_token(34);
                         formType = BodyType.test;
        break;
      case 35:
        jj_consume_token(35);
                         formType = BodyType.addBel;
        break;
      case 36:
        jj_consume_token(36);
                         formType = BodyType.delBel;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 35:
          jj_consume_token(35);
                         formType = BodyType.delAddBel;
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    B = log_expr();
                         if (formType == BodyType.action && B instanceof RelExpr) {
                            {if (true) return new UsageProtBody(BodyType.constraint, (RelExpr)B);} // constraint
                         } else if (B instanceof Literal) {
                            if ( ((Literal)B).isInternalAction() )
                               formType = BodyType.internalAction;
                            {if (true) return new UsageProtBody(formType, (Literal)B);}
                         } else {
                                if (formType == BodyType.test) {
                                   {if (true) return new UsageProtBody(BodyType.test, (Term)B);}  // used in ?(a & b)
                                } else {
                               {if (true) return B;}
                                }
                         }
    throw new Error("Missing return statement in function");
  }

/* Literal */
  final public Literal literal() throws ParseException {
                                Structure F; Token k; boolean type = Literal.LPos;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_NEG:
    case ATOM:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TK_NEG:
        jj_consume_token(TK_NEG);
                                type = Literal.LNeg;
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      F = pred();
                                                if (F.getFunctor().equals("if")) {
                                                               F = (Structure)new Structure(".if_then_else").setTerms(F.getTerms());
                                                            } else if (F.getFunctor().equals("while")) {
                                                               F = (Structure)new Structure(".loop").setTerms(F.getTerms());
                                                            } else if (F.getFunctor().equals("for")) {
                                                               F = (Structure)new Structure(".foreach").setTerms(F.getTerms());
                                                            }

                                if (F.getFunctor().indexOf(".") >= 0) {
                                                                   try {
                                                                      {if (true) return new InternalActionLiteral(F);}
                                   } catch (Exception e) {
                                      logger.warning(getSourceRef(F)+" warning: The internal action class for '"+F+"' was not found!");
                                   }
                                }
                                {if (true) return new LiteralImpl(type,F);}
      break;
    case TK_TRUE:
      k = jj_consume_token(TK_TRUE);
                                {if (true) return Literal.LTrue;}
      break;
    case TK_FALSE:
      k = jj_consume_token(TK_FALSE);
                                {if (true) return Literal.LFalse;}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* Annotated Formulae */
  final public Structure pred() throws ParseException {
                             Token K; Structure p; List l; ListTerm lt; UsageProtBody b;
    K = jj_consume_token(ATOM);
                        p = new Structure(K.image);
                         p.setSrcInfo(new SourceInfo(asSource, K.beginLine));
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 37:
      jj_consume_token(37);
      l = terms();
      jj_consume_token(38);
                         p.setTerms(l);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LBRACE:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_2;
      }
      b = plan_body_term();
                         p.addTerm(b);
    }
                         {if (true) return p;}
    throw new Error("Missing return statement in function");
  }

/* List of terms */
  final public List terms() throws ParseException {
                    ArrayList listTerms = new ArrayList(); Term v; UsageProtBody o;
    v = term();
                         listTerms.add(v);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 39:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_3;
      }
      jj_consume_token(39);
      v = term();
                         listTerms.add(v);
    }
                         listTerms.trimToSize();
                         {if (true) return listTerms;}
    throw new Error("Missing return statement in function");
  }

  final public Term term() throws ParseException {
                         Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      o = list();
      break;
    case LBRACE:
      o = plan_body_term();
      break;
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NOT:
    case TK_NEG:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 36:
    case 37:
      o = log_expr();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                         {if (true) return changeToAtom(o);}
    throw new Error("Missing return statement in function");
  }

  final public ListTerm list() throws ParseException {
                        ListTerm lt = new ListTerm(); ListTerm last; Token K; Term f;
    jj_consume_token(40);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 36:
    case 37:
    case 40:
      f = term_in_list();
                            last = lt.append(f); lt.setSrcInfo(f.getSrcInfo());
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 39:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_4;
        }
        jj_consume_token(39);
        f = term_in_list();
                            last = last.append(f);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 41:
        jj_consume_token(41);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VAR:
          K = jj_consume_token(VAR);
                            last.setNext(new VarTerm(K.image));
          break;
        case UNNAMEDVAR:
          K = jj_consume_token(UNNAMEDVAR);
                            last.setNext(new UnnamedVar(K.image));
          break;
        case 40:
          f = list();
                            last = last.concat((ListTerm)f);
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    jj_consume_token(42);
                            {if (true) return lt;}
    throw new Error("Missing return statement in function");
  }

// term_in_list is the same as term, but log_expr/plan_body must be enclosed by "("....")" to avoid problem with |
  final public Term term_in_list() throws ParseException {
                            Object o;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 40:
      o = list();
      break;
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case NUMBER:
    case ATOM:
    case UNNAMEDVAR:
    case 36:
    case 37:
      o = arithm_expr();
      break;
    case STRING:
      o = string();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                            {if (true) return changeToAtom(o);}
    throw new Error("Missing return statement in function");
  }

/* logical expression */
  final public Object log_expr() throws ParseException {
                              Object t1, t2;
    t1 = log_expr_trm();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 41:
      jj_consume_token(41);
      t2 = log_expr();
                              {if (true) return new LogExpr((Term)t1,LogicalOp.or,(Term)t2);}
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
                              {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object log_expr_trm() throws ParseException {
                              Object t1, t2;
    t1 = log_expr_factor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 43:
      jj_consume_token(43);
      t2 = log_expr_trm();
                              {if (true) return new LogExpr((Term)t1,LogicalOp.and,(Term)t2);}
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
                              {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object log_expr_factor() throws ParseException {
                                      Object t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_NOT:
      jj_consume_token(TK_NOT);
      t = log_expr_factor();
                                      {if (true) return new LogExpr(LogicalOp.not,(Term)t);}
      break;
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case NUMBER:
    case STRING:
    case ATOM:
    case UNNAMEDVAR:
    case 36:
    case 37:
      t = rel_expr();
                                      {if (true) return t;}
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/* relational expression 
   used in context, body and term
   
     <VAR>      [ <OPREL> <EXP> ]  --> this method returns the VarTerm
   | <LITERAL>  [ <OPREL> <EXP> ]  --> returns the Literal
   | <EXP>      [ <OPREL> <EXP> ]  --> returns the ExprTerm 
*/
  final public Object rel_expr() throws ParseException {
                                             Object op1 = null;
                                             Object op2 = null;
                                             RelationalOp operator = RelationalOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case NUMBER:
    case ATOM:
    case UNNAMEDVAR:
    case 36:
    case 37:
      op1 = arithm_expr();
      break;
    case STRING:
      op1 = string();
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
                                             operator = RelationalOp.lt;
        break;
      case 45:
        jj_consume_token(45);
                                             operator = RelationalOp.lte;
        break;
      case 46:
        jj_consume_token(46);
                                             operator = RelationalOp.gt;
        break;
      case 47:
        jj_consume_token(47);
                                             operator = RelationalOp.gte;
        break;
      case 48:
        jj_consume_token(48);
                                             operator = RelationalOp.eq;
        break;
      case 49:
        jj_consume_token(49);
                                             operator = RelationalOp.dif;
        break;
      case 50:
        jj_consume_token(50);
                                             operator = RelationalOp.unify;
        break;
      case 51:
        jj_consume_token(51);
                                             operator = RelationalOp.literalBuilder;
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case TK_TRUE:
      case TK_FALSE:
      case TK_NEG:
      case NUMBER:
      case ATOM:
      case UNNAMEDVAR:
      case 36:
      case 37:
        op2 = arithm_expr();
        break;
      case STRING:
        op2 = string();
        break;
      case 40:
        op2 = list();
        break;
      case LBRACE:
        op2 = plan_body_term();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                             if ( ((Term)op1).isInternalAction() && operator != RelationalOp.literalBuilder)
                                                {if (true) throw new ParseException(getSourceRef(op1)+" RelExpr: operand '"+op1+"' can not be an internal action.");}
                                             if ( ((Term)op2).isInternalAction() && operator != RelationalOp.literalBuilder)
                                                {if (true) throw new ParseException(getSourceRef(op2)+" RelExpr: operand '"+op2+"' can not be an internal action.");}
                                             {if (true) return new RelExpr((Term)op1, operator, (Term)op2);}
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
                                             {if (true) return op1;}
    throw new Error("Missing return statement in function");
  }

/* arithmetic expression */
  final public Object arithm_expr() throws ParseException {
                                Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_trm();
                                op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 35:
    case 36:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        jj_consume_token(35);
                                op = ArithmeticOp.plus;
        break;
      case 36:
        jj_consume_token(36);
                                op = ArithmeticOp.minus;
        break;
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr();
                                if (!(t1 instanceof NumberTerm)) {
                                   {if (true) throw new ParseException(getSourceRef(t1)+" ArithExpr: first operand '"+t1+"' is not numeric or variable.");}
                                }
                                if (!(t2 instanceof NumberTerm)) {
                                   {if (true) throw new ParseException(getSourceRef(t2)+" ArithExpr: second operand '"+t2+"' is not numeric or variable.");}
                                }
                                {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
                                {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_trm() throws ParseException {
                                  Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_factor();
                                  op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TK_INTDIV:
    case TK_INTMOD:
    case 52:
    case 53:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 52:
        jj_consume_token(52);
                                  op = ArithmeticOp.times;
        break;
      case 53:
        jj_consume_token(53);
                                  op = ArithmeticOp.div;
        break;
      case TK_INTDIV:
        jj_consume_token(TK_INTDIV);
                                  op = ArithmeticOp.intdiv;
        break;
      case TK_INTMOD:
        jj_consume_token(TK_INTMOD);
                                  op = ArithmeticOp.mod;
        break;
      default:
        jj_la1[28] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      t2 = arithm_expr_trm();
                                  if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t1)+" ArithTerm: first operand '"+t1+"' is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t2)+" ArithTerm: second operand '"+t2+"' is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
                                  {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_factor() throws ParseException {
                                  Object t1, t2; ArithmeticOp op;
    t1 = arithm_expr_simple();
                                  op = ArithmeticOp.none;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      jj_consume_token(54);
                                  op = ArithmeticOp.pow;
      t2 = arithm_expr_factor();
                                  if (!(t1 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t1)+" ArithFactor: first operand '"+t1+"' is not numeric or variable.");}
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t2)+" ArithFactor: second operand '"+t2+"' is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2);}
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
                                  {if (true) return t1;}
    throw new Error("Missing return statement in function");
  }

  final public Object arithm_expr_simple() throws ParseException {
                                  Token K; Object t; VarTerm v;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMBER:
      K = jj_consume_token(NUMBER);
                                  NumberTerm ni = new NumberTerm(Double.parseDouble(K.image));
                                  ni.setSrcInfo(new SourceInfo(asSource, K.beginLine));
                                  {if (true) return ni;}
      break;
    case 36:
      jj_consume_token(36);
      t = arithm_expr_simple();
                                  if (!(t instanceof NumberTerm)) {
                                    {if (true) throw new ParseException(getSourceRef(t)+" The argument '"+t+"' of operator '-' is not numeric or variable.");}
                                  }
                                  {if (true) return new ArithExpr(ArithmeticOp.minus, (NumberTerm)t);}
      break;
    case 37:
      jj_consume_token(37);
      t = log_expr();
      jj_consume_token(38);
                                  {if (true) return t;}
      break;
    case VAR:
    case UNNAMEDVAR:
      v = var();
                                  {if (true) return v;}
      break;
    case TK_TRUE:
    case TK_FALSE:
    case TK_NEG:
    case ATOM:
      t = function();
                                  {if (true) return t;}
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Term function() throws ParseException {
                            Literal l;
    l = literal();
                            {if (true) return l;}
    throw new Error("Missing return statement in function");
  }

  final public VarTerm var() throws ParseException {
                      Token K; VarTerm v; ListTerm lt;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      K = jj_consume_token(VAR);
                      v = new VarTerm(K.image); v.setSrcInfo(new SourceInfo(asSource, K.beginLine));
      break;
    case UNNAMEDVAR:
      K = jj_consume_token(UNNAMEDVAR);
                      v = new UnnamedVar(K.image);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                      {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public StringTerm string() throws ParseException {
                      Token k; StringTerm s;
    k = jj_consume_token(STRING);
                      s = new StringTerm(k.image.substring(1,k.image.length()-1));
                      s.setSrcInfo(new SourceInfo(asSource,k.beginLine));
                      {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ArtifactManualParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[33];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400,0x1000,0x800,0x3a7c000,0x80000000,0x0,0x0,0x0,0x40000,0x1058000,0x0,0x80,0x0,0x3a7c080,0x0,0x2004000,0x0,0x3a5c000,0x3a5c000,0x0,0x0,0x3a7c000,0x3a5c000,0x0,0x3a5c080,0x0,0x0,0x0,0x180000,0x180000,0x0,0x325c000,0x2004000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x3f,0x0,0x8,0x1f,0x1f,0x0,0x0,0x20,0x0,0x80,0x130,0x80,0x100,0x200,0x130,0x130,0x200,0x800,0x30,0x30,0xff000,0x130,0xff000,0x18,0x18,0x300000,0x300000,0x400000,0x30,0x0,};
   }

  /** Constructor with InputStream. */
  public ArtifactManualParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ArtifactManualParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ArtifactManualParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ArtifactManualParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ArtifactManualParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ArtifactManualParser(ArtifactManualParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ArtifactManualParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 33; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 33; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
