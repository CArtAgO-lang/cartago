options {
   FORCE_LA_CHECK=true;
   STATIC=false;
   IGNORE_CASE=false;
}


PARSER_BEGIN(ArtifactManualParser)

  package cartago.manual.parser;

  import cartago.*;
  import cartago.manual.syntax.*;  
  import cartago.manual.syntax.UsageProtBody.BodyType;
  import cartago.manual.syntax.LogExpr.LogicalOp;
  import cartago.manual.syntax.RelExpr.RelationalOp;
  import cartago.manual.syntax.ArithExpr.ArithmeticOp;
  
  import java.util.*;
  import java.util.logging.*;
  
  
public class ArtifactManualParser {

    private String asSource = null;
    
    private static Logger logger = Logger.getLogger("aslparser");
    private static Set<String> parsedFiles = new HashSet<String>();
    //private static Config config = Config.get();

	public Manual parse() throws ParseException {
		return Start();
	} 
	
    private String getSourceRef(SourceInfo s) {
        if (s == null)
            return "[]";
        else
            return "["+s.getSrcFile()+":"+s.getBeginSrcLine()+"]";
    }
    private String getSourceRef(DefaultTerm t) {
        return getSourceRef( ((DefaultTerm)t).getSrcInfo());
    }
    private String getSourceRef(Object t) {
        if (t instanceof DefaultTerm)
            return getSourceRef((DefaultTerm)t);
        else if (t instanceof SourceInfo)
            return getSourceRef((SourceInfo)t);
        else
            return "[]";
    }

    private Term changeToAtom(Object o) {
        Term u = (Term)o;
        if (u.isAtom()) {
           return new Atom((Literal)u);
        } else {
           return u; 
        }  
    }

}

PARSER_END(ArtifactManualParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
|  <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN :
{
  <LBRACE: "{">
| <RBRACE: "}">
| <MAN: "manual" >
| <UPROT: "usageprot">
| <PRE: ":precond">
| <FUNCT: ":function">
| <BODY: ":body">
}

// Note: i do not why, but vars must be defined before TK_BEGIN and END
TOKEN : {
  <VAR : (<UP_LETTER> (<CHAR>)*) >
}

TOKEN : {
// Predefined
  <TK_TRUE:   "true">
| <TK_FALSE:  "false">
| <TK_NOT:    "not">
| <TK_NEG:    "~">
| <TK_INTDIV: "div">
| <TK_INTMOD: "mod">

// Numbers
|  <NUMBER: ["0"-"9"] (["0"-"9"])*
          | (["0"-"9"])* "." (["0"-"9"])+ (<EXPONENT>)?
          | (["0"-"9"])+ <EXPONENT> >
|  <EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>

// Strings
|  <STRING: "\"" ( ~["\"","\\","\n","\r"]
                 | "\\" ( ["n","t","b","r","f","\\","\'","\""]
                        | ["0"-"7"] (["0"-"7"])?
                        | ["0"-"3"] ["0"-"7"] ["0"-"7"]))* "\"">

// Identifiers
|  <ATOM      : (<LC_LETTER> | "." <CHAR>) (<CHAR> | "." <CHAR>)*>
|  <UNNAMEDVAR: ("_" (<CHAR>)*) >
|  <CHAR      : (<LETTER> | <DIGIT> | "_")>
|  <LETTER    : ( <LC_LETTER> | <UP_LETTER> )>
|  <LC_LETTER : ["a"-"z"]>
|  <UP_LETTER : ["A"-"Z"]>
|  <DIGIT     : ["0"-"9"]>
}



/* productions */
Manual Start() :
{   
  Token artType = null;
  Manual man = null;
}
{	
    
    <MAN> artType = <ATOM> <LBRACE>
    {
  	man = new Manual(artType.toString());   
    }
	(
	{ 
	  Token protSignature = null;
	  Object pre = null;
	  Literal funct = null;
	  UsageProtBody protocol = null;
	}
	
	<UPROT> protSignature = <ATOM> <LBRACE>
		(<FUNCT> funct = literal())?
		(<PRE> pre = log_expr())?
		<BODY> <LBRACE>
		  ( protocol = plan_body() )?
		<RBRACE>			
	<RBRACE>
	
	{ 
		UsageProtocol prot = new UsageProtocol(protSignature.image,funct);
						
		if (pre!=null){
			prot.setPrecondition(pre);
		}
			
		if (protocol!=null){
		    prot.setBody(protocol);
		}
		
		man.addUsageProtocol(prot);
	})*
	<RBRACE>				
	<EOF>
	{
		return man;
	}
}




/* Plan body */
UsageProtBody plan_body() :     { Object F; UsageProtBody R = null; }
{
  F = body_formula()       
                 
  [ ";"                    { if (!(F instanceof UsageProtBody)) throw new ParseException(getSourceRef(F)+" "+F+" is not a body literal!");  }
    R = plan_body()        
  ]
                           { if (F instanceof UsageProtBody) {
                                ((UsageProtBody)F).setBodyNext( R );
                             }
                             return (UsageProtBody)F;
                           }
}

UsageProtBody plan_body_term(): { UsageProtBody B = null; }
{
  "{"
  B = plan_body()
  "}"
                           { B.setAsBodyTerm(true); 
                             return B; 
                           }
}


Object body_formula() : 
                       { BodyType formType = BodyType.action;  Object B; }
{
   [  "!"              { formType = BodyType.achieve; }
    | "!!"             { formType = BodyType.achieveNF; }
    | "?"              { formType = BodyType.test; }
    | "+"              { formType = BodyType.addBel; }
    | ( "-"            { formType = BodyType.delBel; }
        ["+"           { formType = BodyType.delAddBel; }
        ]
      ) 
   ]
   
   B = log_expr()
                       { if (formType == BodyType.action && B instanceof RelExpr) {
                            return new UsageProtBody(BodyType.constraint, (RelExpr)B); // constraint
                         } else if (B instanceof Literal) {
                            if ( ((Literal)B).isInternalAction() )
                               formType = BodyType.internalAction;
                            return new UsageProtBody(formType, (Literal)B);  
                         } else {
	                        if (formType == BodyType.test) {
	                           return new UsageProtBody(BodyType.test, (Term)B);  // used in ?(a & b)
	                        } else { 
                               return B;
	                        }
                         }
                       }
}


/* Literal */
Literal literal() :           { Structure F; Token k; boolean type = Literal.LPos; }
{
  ( ( [ <TK_NEG>              { type = Literal.LNeg; }
      ]
      F=pred()                { 
      
         				        if (F.getFunctor().equals("if")) {
							       F = (Structure)new Structure(".if_then_else").setTerms(F.getTerms());
							    } else if (F.getFunctor().equals("while")) {
							       F = (Structure)new Structure(".loop").setTerms(F.getTerms());
							    } else if (F.getFunctor().equals("for")) {
							       F = (Structure)new Structure(".foreach").setTerms(F.getTerms());
							    }
      
                                if (F.getFunctor().indexOf(".") >= 0) {
								   try {
								      return new InternalActionLiteral(F);
                                   } catch (Exception e) {
                                      logger.warning(getSourceRef(F)+" warning: The internal action class for '"+F+"' was not found!");
                                   }
                                }
                                return new LiteralImpl(type,F);
                              }
    )
  | k=<TK_TRUE>               { return Literal.LTrue; } 
  | k=<TK_FALSE>              { return Literal.LFalse; } 
  )
}



/* Annotated Formulae */
Structure pred() :         { Token K; Structure p; List l; ListTerm lt; UsageProtBody b; }
{
  K=<ATOM>
                      { p = new Structure(K.image);
                         p.setSrcInfo(new SourceInfo(asSource, K.beginLine));
                       } 
  
  [
    "(" l = terms() 
    ")"                { p.setTerms(l); }
  ]
  ( b=plan_body_term() { p.addTerm(b); }  
  )*
                       { return p; }
}


/* List of terms */
List terms() :    { ArrayList listTerms = new ArrayList(); Term v; UsageProtBody o; }
{
  v=term()             { listTerms.add(v); } 
  ( "," v=term()       { listTerms.add(v); }
  )* 
                       { listTerms.trimToSize(); 
                         return listTerms; 
                       }
}


Term term() :          { Object o; }
{
  ( o=list()           
  | o=plan_body_term() 
  | o=log_expr()       // log_expr includes literals/atoms/structures  
  )
                       { return changeToAtom(o); }
}


ListTerm list() :     { ListTerm lt = new ListTerm(); ListTerm last; Token K; Term f; }
{
  "["
  [
  f=term_in_list()        { last = lt.append(f); lt.setSrcInfo(f.getSrcInfo()); }
  ( "," f=term_in_list()  { last = last.append(f); }
  )*
  [ "|"  ( K=<VAR>        { last.setNext(new VarTerm(K.image)); }
         | K=<UNNAMEDVAR> { last.setNext(new UnnamedVar(K.image)); }
         | f=list()       { last = last.concat((ListTerm)f); }
         )           
  ]
  ]
  "]"                     { return lt; } 
}

// term_in_list is the same as term, but log_expr/plan_body must be enclosed by "("....")" to avoid problem with |
Term term_in_list() :     { Object o; }
{
  ( o=list()        
  | o=arithm_expr()     
  | o=string()      
  )
                          { return changeToAtom(o); }  
}


/* logical expression */

Object log_expr() :         { Object t1, t2; }
{					
   t1 = log_expr_trm()         
   [  "|" t2 = log_expr()   { return new LogExpr((Term)t1,LogicalOp.or,(Term)t2); } ]
                            { return t1; }
}

Object log_expr_trm() :     { Object t1, t2; }
{
   t1 = log_expr_factor()    
[  "&" t2 = log_expr_trm()  { return new LogExpr((Term)t1,LogicalOp.and,(Term)t2); } ]
                            { return t1; }
}

Object log_expr_factor():             
                                    { Object t; }
{
(  
  <TK_NOT> t = log_expr_factor()    { return new LogExpr(LogicalOp.not,(Term)t); } 
 | 
  t = rel_expr()                    { return t; } 
)
}


/* relational expression 
   used in context, body and term
   
     <VAR>      [ <OPREL> <EXP> ]  --> this method returns the VarTerm
   | <LITERAL>  [ <OPREL> <EXP> ]  --> returns the Literal
   | <EXP>      [ <OPREL> <EXP> ]  --> returns the ExprTerm 
*/
Object rel_expr() :               
                                          {  Object op1 = null;
                                             Object op2 = null;
                                             RelationalOp operator = RelationalOp.none;
                                           }
{
    (   op1 = arithm_expr()                
      | op1 = string()
    )
                     
    [
       ( "<"                               { operator = RelationalOp.lt; } 
       | "<="                              { operator = RelationalOp.lte; } 
       | ">"                               { operator = RelationalOp.gt; } 
       | ">="                              { operator = RelationalOp.gte; } 
       | "=="                              { operator = RelationalOp.eq; } 
       | "\\=="                            { operator = RelationalOp.dif; } 
       | "="                               { operator = RelationalOp.unify; } 
       | "=.."                             { operator = RelationalOp.literalBuilder; } 
       )

       (   op2 = arithm_expr()        
         | op2 = string()               
         | op2 = list()
         | op2 = plan_body_term()
       )

                                           { if ( ((Term)op1).isInternalAction() && operator != RelationalOp.literalBuilder)
                                                throw new ParseException(getSourceRef(op1)+" RelExpr: operand '"+op1+"' can not be an internal action.");
                                             if ( ((Term)op2).isInternalAction() && operator != RelationalOp.literalBuilder)
                                                throw new ParseException(getSourceRef(op2)+" RelExpr: operand '"+op2+"' can not be an internal action.");                                             
                                             return new RelExpr((Term)op1, operator, (Term)op2); 
                                           }
    ]
                                           { return op1; }
}


/* arithmetic expression */
Object arithm_expr() :        { Object t1, t2; ArithmeticOp op;}
{
   t1 = arithm_expr_trm()     { op = ArithmeticOp.none; }
[  ( "+"                      { op = ArithmeticOp.plus;} 
   | "-"                      { op = ArithmeticOp.minus;}
   )
   t2 = arithm_expr()         { if (!(t1 instanceof NumberTerm)) {
                                   throw new ParseException(getSourceRef(t1)+" ArithExpr: first operand '"+t1+"' is not numeric or variable.");
                                }
                                if (!(t2 instanceof NumberTerm)) {
                                   throw new ParseException(getSourceRef(t2)+" ArithExpr: second operand '"+t2+"' is not numeric or variable.");
                                }
                                return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2); 
                              }
]                             { return t1; }
}

Object arithm_expr_trm() :      { Object t1, t2; ArithmeticOp op;}
{
   t1 = arithm_expr_factor()    { op = ArithmeticOp.none; }
[  ( "*"                        { op = ArithmeticOp.times; } 
   | "/"                        { op = ArithmeticOp.div; }
   | <TK_INTDIV>                { op = ArithmeticOp.intdiv; }
   | <TK_INTMOD>                { op = ArithmeticOp.mod; }
   )
   t2 = arithm_expr_trm()       { if (!(t1 instanceof NumberTerm)) {
                                    throw new ParseException(getSourceRef(t1)+" ArithTerm: first operand '"+t1+"' is not numeric or variable.");
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    throw new ParseException(getSourceRef(t2)+" ArithTerm: second operand '"+t2+"' is not numeric or variable.");
                                  }
                                  return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2); 
                                }
]                               { return t1; }
}

Object arithm_expr_factor():   
                                { Object t1, t2; ArithmeticOp op;}
{
   t1 = arithm_expr_simple()    { op = ArithmeticOp.none; }
[  ( "**"                       { op = ArithmeticOp.pow; }
   )
   t2 = arithm_expr_factor()    { if (!(t1 instanceof NumberTerm)) {
                                    throw new ParseException(getSourceRef(t1)+" ArithFactor: first operand '"+t1+"' is not numeric or variable.");
                                  }
                                  if (!(t2 instanceof NumberTerm)) {
                                    throw new ParseException(getSourceRef(t2)+" ArithFactor: second operand '"+t2+"' is not numeric or variable.");
                                  }
                                  return new ArithExpr((NumberTerm)t1, op, (NumberTerm)t2); 
                                }
]                               { return t1; }
}


Object arithm_expr_simple():    
                                { Token K; Object t; VarTerm v; }
{
 ( K = <NUMBER>                 { NumberTerm ni = new NumberTerm(Double.parseDouble(K.image));
                                  ni.setSrcInfo(new SourceInfo(asSource, K.beginLine)); 
                                  return ni;
                                }
 | "-" t = arithm_expr_simple() { if (!(t instanceof NumberTerm)) {
                                    throw new ParseException(getSourceRef(t)+" The argument '"+t+"' of operator '-' is not numeric or variable.");
                                  }
                                  return new ArithExpr(ArithmeticOp.minus, (NumberTerm)t); 
                                }
 | "(" t = log_expr() ")"       { return t; }
 | v = var()                    { return v; }
 | t = function()               { return t; }
 )
}

Term function():          { Literal l; }
{
   l = literal()
                          { return l;
                          } 
}


VarTerm var():      { Token K; VarTerm v; ListTerm lt; }
{
 ( K = <VAR>        { v = new VarTerm(K.image); v.setSrcInfo(new SourceInfo(asSource, K.beginLine));}
 | K = <UNNAMEDVAR> { v = new UnnamedVar(K.image); }
 )
                    { return v; }
}

StringTerm string():{ Token k; StringTerm s; }
{
  k = <STRING>      { s = new StringTerm(k.image.substring(1,k.image.length()-1)); 
                      s.setSrcInfo(new SourceInfo(asSource,k.beginLine)); 
                      return s;
                    } 
}
